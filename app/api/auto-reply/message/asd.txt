// import { writeFile, unlink } from 'fs/promises'
// import { getServerSession } from 'next-auth'
// import { NextRequest, NextResponse } from 'next/server'
// import type { NextApiRequest, NextApiResponse } from 'next'
// import { join } from 'path'
// import { authConfig } from "@/app/api/auth/[...nextauth]/route"

// export const POST = async (request: NextRequest, response: NextResponse) => {
//     const data = await request.formData()
//     const file: File | null = data.get('media') as unknown as File
//     console.log('berhasil')
//     // const otherFields = {};
//     const recipients = []
//     const requests = []
//     // @ts-ignore
//     for (const [key, value] of data.entries()) {
//         // Exclude user-related keys
//         if (key.startsWith('recipients[')) {
//             recipients.push(value)
//         } else if (key.startsWith('requests[')) {
//             requests.push(value)
//         }
//     }
//     console.log(recipients)
//     console.log(requests)
//     return NextResponse.json({ message: 'success' }, { status: 200 })

//     // Assuming formData is an object with keys like 'user[0]', 'user[1]', etc.
//     const users = {};
//     for (const [key, value] of formData.entries()) {
//         if (key.startsWith('user[')) {
//             users[key] = value;
//         }
//     }
//     if (!file && sessionId && recipients) {
//         return NextResponse.json({ success: false }, { status: 400 })
//     }
//     try {
//         const session: any = await getServerSession(
//             request as unknown as NextApiRequest,
//             {
//                 ...response,
//                 getHeader: (name: string) => response.headers?.get(name),
//                 setHeader: (name: string, value: string) => response.headers?.set(name, value),
//             } as unknown as NextApiResponse,
//             authConfig
//         );
//         if (!session?.user) {
//             return NextResponse.json({ error: 'Session not found' }, { status: 400 })
//         }
//         const bytes = await file.arrayBuffer()
//         const buffer = Buffer.from(bytes)
//         const path = join(process.cwd(), 'public', 'uploads', file.name)
//         await writeFile(path, buffer)
//         const formdata = new FormData()
//         formdata.set('image', file, path)
//         formdata.append('caption', caption)
//         formdata.append('recipients[0]', recipients)

//         const sendMessage = await fetch(process.env.BACKEND_URL + '/messages/' + sessionId + '/send/image', {
//             method: 'POST',
//             headers: {
//                 'Authorization': 'Bearer ' + session.user.token,
//                 // 'Content-Type': 'multipart/form-data'
//             },
//             body: formdata
//         })
//         if (sendMessage.ok) {
//             unlink(path)
//             return NextResponse.json({ message: 'success send data' }, { status: 200 })
//         }
//         unlink(path)
//         console.log(await sendMessage.text())
//         return NextResponse.json({ message: 'failed to send' }, { status: 500 })

//     } catch (error) {
//         console.log(error)
//         return NextResponse.json({ error: error }, { status: 500 })
//     }
// }